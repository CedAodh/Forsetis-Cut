
eventChapter16BWorldMapEvents ; E7/EE72

	SCROLL_CAMERA_SPEED [4, 14], 4
	SET_ACTIVE_COORDS
	YIELD

	PLAY_SOUND_WORD $00E0
	PAUSE_SKIPPABLE 32
	YIELD

	SET_MUSIC $2C
	YIELD

	FADE_IN $01
	YIELD

	SCROLL_CAMERA_SPEED [4, 8], 1
	SET_ACTIVE_COORDS
	YIELD

	STORE_WORD $7EA93B, $0000
	STORE_WORD $7EA93F, $01A0
	CALL_ASM_SKIPPABLE $91CB0D, $0000

	STORE_WORD $7EA93D, $0000
	STORE_WORD $7EA937, 180
	STORE_WORD $7EA939, 164
	STORE_WORD $7EA93B, $000A
	STORE_WORD $7EA93F, $01A0
	CALL_ASM_SKIPPABLE $91CA46, $0000

	STORE_LONG lEventEngineLongParameter, ch16Bwm1
	CALL_ASM_SKIPPABLE rlASMCWorldMapDialogue, $0000

	HALT_UNTIL_WORD_SKIPPABLE wUnknown0017E9, $0000

	STORE_WORD $7EA93D, $0000
	CALL_ASM_SKIPPABLE $91CD81, $0000

	PAUSE_SKIPPABLE 1
	YIELD

	STORE_WORD $7EA93F, $01A0
	CALL_ASM_SKIPPABLE $91CB46, $0000

	STORE_WORD $7EA93B, $0000
	STORE_WORD $7EA93F, $00C0
	CALL_ASM_SKIPPABLE $91CB0D, $0000

	STORE_WORD $7EA93D, $0000
	STORE_WORD $7EA937, 200
	STORE_WORD $7EA939, 104
	STORE_WORD $7EA93B, $000D
	STORE_WORD $7EA93F, $0001
	CALL_ASM_SKIPPABLE $91CA46, $0000

	STORE_LONG lEventEngineLongParameter, ch16Bwm2
	CALL_ASM_SKIPPABLE rlASMCWorldMapDialogue, $0000

	HALT_UNTIL_WORD_SKIPPABLE wUnknown0017E9, $0000

	STORE_WORD $7EA93F, $00C0
	CALL_ASM_SKIPPABLE $91CB46, $0000

	STORE_WORD $7EA93D, $0000
	CALL_ASM_SKIPPABLE $91CD81, $0000

	PAUSE_SKIPPABLE 1
	YIELD

	FADE_OUT $02
	YIELD

	CALL_ASM_LOOP rlASMCEndWMEvents, $0000
	YIELD
	
	STORE_WORD wEventEngineParameter1, $4000 ; This is the skipping bit
	CALL_ASM_LOOP rlASMCResetEventStatusBits, $0000
	YIELD
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	SET_MUSIC $01
	YIELD

	STORE_WORD wEventEngineParameter1, 3
	CALL_ASM_SKIPPABLE rlASMCDialogueWithBGSetup, <>rsUnknown80A23A

	HALT_UNTIL_WORD_SKIPPABLE wUnknown000302, $0009
	CALL_ASM_LONG_SKIPPABLE rlASMCDialogueWithBGStart, shouldleifmaketherounds
	YIELD_UNK
	YIELD_UNK
	YIELD_UNK
	YIELD

	HALT_UNTIL_WORD_SKIPPABLE wUnknown0017E9, $0000

	FADE_OUT $01
	YIELD

	CALL_ASM_LOOP rlASMCDialogueWithBGEndFadeOut, $0000

	STORE_BYTE bBuf_INIDISP, $00
	JUMP_FALSE _NoInterim
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	PLAY_SOUND_WORD $00F7
	
	STORE_WORD wEventEngineCharacterTarget, Dean
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	STORE_WORD wEventEngineCharacterTarget, Linoan
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	macroDialogueWithBackground deanlinoanA, 3
	
	CALL_ASM_LOOP rlASMCDialogueWithBGEnd, $0000
	YIELD
	
	STORE_WORD wEventEngineParameter1, $4000 ; This is the skipping bit
	CALL_ASM_LOOP rlASMCResetEventStatusBits, $0000
	YIELD
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	+
	
	STORE_WORD wEventEngineCharacterTarget, Trude
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	STORE_WORD wEventEngineCharacterTarget, Asaello
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	macroDialogueWithBackground asaellotrude, 3
	
	CALL_ASM_LOOP rlASMCDialogueWithBGEnd, $0000
	YIELD
	
	STORE_WORD wEventEngineParameter1, $4000 ; This is the skipping bit
	CALL_ASM_LOOP rlASMCResetEventStatusBits, $0000
	YIELD
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	+
	
	STORE_WORD wEventEngineCharacterTarget, Tina
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	STORE_WORD wEventEngineCharacterTarget, Asbel
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	macroDialogueWithBackground tinaasbel1, 3
	
	CALL_ASM_LOOP rlASMCDialogueWithBGEnd, $0000
	YIELD
	
	+
	
	_NoInterim
	
	STORE_WORD wEventEngineParameter1, $4000 ; This is the skipping bit
	CALL_ASM_LOOP rlASMCResetEventStatusBits, $0000
	YIELD
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	EVENT_TEST_FLAG_SET $A3
	JUMP_TRUE +
	
	LOAD1 eventChapter16BData._ShannamGroup
	YIELD
	
	STORE_WORD wEventEngineCharacterTarget, Homer
	CALL_ASM_LOOP rlASMCCheckAllUnitAlive, $0000
	JUMP_FALSE +
	
	PLAY_SOUND_WORD $00E0
	PAUSE_SKIPPABLE 16
	YIELD
	
	SET_MUSIC $58
	YIELD
	
	macroDialogueWithBackground homerseesshannam, 3
	
	CALL_ASM_LOOP rlASMCDialogueWithBGEnd, $0000
	YIELD
	
	+
	
	STORE_WORD wEventEngineParameter1, $4000 ; This is the skipping bit
	CALL_ASM_LOOP rlASMCResetEventStatusBits, $0000
	YIELD
	
	CALL_ASM_SKIPPABLE rlEventEngineCancelFading, $0000
	
	PLAY_SOUND_WORD $00E0
	PAUSE_SKIPPABLE 32
	YIELD
	
	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 16 | (9 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Miracle
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 16 | (4 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Pavise
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 18 | (4 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Adept
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 4 | (1 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.MovementStars
	STORE_WORD wEventEngineParameter2, 5 * 5
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 17 | (16 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Accost
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 17 | (5 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.MovementStars
	STORE_WORD wEventEngineParameter2, 3 * 5
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 17 | (10 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills3
	STORE_WORD wEventEngineParameter2, Skill3Sol
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000
		
	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 10 | (2 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Nihil
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 7 | (4 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill3Wrath << 8
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000

	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 3 | (3 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills2
	STORE_WORD wEventEngineParameter2, Skill2Vantage
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000
		
	STORE_WORD wEventEngineCharacterStructParameter, structCharacterDataRAM.Coordinates
	STORE_WORD wEventEngineCharacterTarget, 2 | (2 << 8)
	STORE_WORD wEventEngineParameter1, structCharacterDataRAM.Skills1
	STORE_WORD wEventEngineParameter2, Skill1Renewal
	CALL_ASM_LOOP rlASMCSetBitsCharacterDataIfWord, $0000
	
	STORE_WORD wEventEngineCharacterTarget, Finn
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Fergus
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Karin
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Brighton
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Nanna
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Hicks
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Callion
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Selphina
	CALL_ASM_LOOP rlASMCMount, $0000
	YIELD
	STORE_WORD wEventEngineCharacterTarget, Kane
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Alba
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Robert
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Olwen
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Fred
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Glade
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Dean
	CALL_ASM_LOOP rlASMCMount, $0000
	STORE_WORD wEventEngineCharacterTarget, Eda
	CALL_ASM_LOOP rlASMCMount, $0000
	
	FADE_IN $02
	
	SET_MUSIC $2D
	YIELD
END1

rlASMCResetEventStatusBits

        .al
        .xl
        .autsiz
        .databank ?

        ; This unsets bits in wEventEngineStatus
        ; that are common in wEventEngineParameter1.
        ; Use with CALL_ASM_LOOP.

        ; Inputs:
        ; wEventEngineParameter1: status bits word

        pha

        lda wEventEngineParameter1,b
        trb wEventEngineStatus,b

        pla

        clc
        rtl